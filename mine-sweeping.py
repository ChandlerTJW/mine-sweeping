import turtle, random
t = turtle.Turtle()
t.hideturtle()
turtle.tracer(10000, 0.0001)

def log(*args):
    print(args)

def setpen(x, y):
    t.penup()
    t.goto(x, y)
    t.pendown()
    t.setheading(0)

def draw_line_square(x, y, size1, n1=10, color1='#0997F7', color2='white'):
    setpen(x, y)
    t.pencolor(color1)
    t.pensize(2)
    t.fillcolor(color2)
    t.begin_fill()
    for i in range(n1):
        for j in range(4):
            t.forward(size1)
            t.right(90)
        x += size1
        setpen(x, y)
    t.end_fill()

def draw_square_square(x, y, size1, n2=10):
    for i in range(n2):
        draw_line_square(x, y, size1)
        y -= size1
        setpen(x, y)

draw_square_square(-200, 200, 30)

def random_line_09(n1=10):
    result = []
    for i in range(n1):
        result.append(random.randint(0, 1))
    a = -1
    for i in result:
        a += 1
        if i == 1:
            result[a] = 9
    return result

def random_square_09(n2=10, limit=10):
    square = []
    a = 0
    for i in range(n2):
        line = random_line_09()
        b = -1
        for j in line:
            b += 1
            if j == 9:
                a += 1
                if a > limit:
                    line[b] = 0
        square.append(line)
    return square

array = random_square_09()

def add_array(array):
    add_array = array
    for i in range(len(array)):
        add_array[i].insert(0, 0)
        add_array[i].append(0)
    a = []
    for j in range(len(array)+2):
        a.append(0)
    add_array.insert(0, a)
    add_array.append(a)
    return add_array

# log(array)
add_array = add_array(array)
# log(add_array)


def find_list(x, y):
    l = []
    a = len(add_array)
    if y + 1 == a - 1:
        for i in add_array[x - 1][y - 1:]:
            l.append(i)
        for j in add_array[x + 1][y - 1:]:
            l.append(j)
    else:
        for i in add_array[x - 1][y - 1:y + 2]:
            l.append(i)
        for j in add_array[x + 1][y - 1:y + 2]:
            l.append(j)
    l.append(add_array[x][y - 1])
    l.append(add_array[x][y + 1])
    return l

def marked_square(add_array):
    for a in range(1, len(add_array)-1):
        for b in range(1, len(add_array[a])-1):
            l = find_list(a, b)
            c = 0
            for i in l:
                if i == 9:
                    c += 1
            if add_array[a][b] == 0:
                add_array[a][b] = c
    array = add_array[1:-1]
    for a, j in enumerate(array):
        array[a] = array[a][1:-1]
    return array

square = marked_square(add_array)

# log(square)

dict_char = {
    'G': [
    ['0', '0', '1', '1', '1', '1', '0'],
    ['0', '1', '0', '0', '0', '0', '0'],
    ['0', '1', '0', '0', '0', '0', '0'],
    ['0', '1', '0', '1', '1', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '0', '1', '1', '1', '1', '0'],
    ],
    'A': [
    ['0', '0', '0', '1', '0', '0', '0'],
    ['0', '0', '1', '0', '1', '0', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '1', '1', '1', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ],
    'M': [
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '1', '0', '1', '1', '0'],
    ['0', '1', '0', '1', '0', '1', '0'],
    ['0', '1', '0', '1', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ],
    'E': [
    ['0', '1', '1', '1', '1', '1', '0'],
    ['0', '1', '0', '0', '0', '0', '0'],
    ['0', '1', '0', '0', '0', '0', '0'],
    ['0', '1', '1', '1', '1', '1', '0'],
    ['0', '1', '0', '0', '0', '0', '0'],
    ['0', '1', '0', '0', '0', '0', '0'],
    ['0', '1', '1', '1', '1', '1', '0'],
    ],
    'O': [
    ['0', '0', '1', '1', '1', '0', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '0', '1', '1', '1', '0', '0'],
    ],
    'V': [
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '0', '1', '0', '1', '0', '0'],
    ['0', '0', '0', '1', '0', '0', '0'],
    ],
    'R': [
    ['0', '1', '1', '1', '1', '0', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ['0', '1', '1', '1', '1', '0', '0'],
    ['0', '1', '0', '1', '0', '0', '0'],
    ['0', '1', '0', '0', '1', '0', '0'],
    ['0', '1', '0', '0', '0', '1', '0'],
    ],
    ' ': [
    ['0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0'],
    ],
}

dict_num = {
    0: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
    1: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
    2: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
    3: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
    4: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '0', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '0', '9', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '9', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
    5: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
    6: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
    7: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
    8: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '9', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
    9: [
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0', '0', '9', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0', '9', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0', '0', '9', '9', '0', '0', '0', '9', '9', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9', '0', '0', '9', '0', '9', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0', '9', '0', '0', '0', '9', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '0'],
    ['0', '0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '9', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9', '9', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
    ],
}

def draw_pixel(x, y, pixel, size2=3):
    setpen(x, y)
    color = ''
    if pixel == '0':
        color = 'white'
    else:
        color = '#0997F7'
        t.fillcolor(color)
        t.begin_fill()
        for i in range(4):
            t.forward(size2)
            t.right(90)
        t.end_fill()

def draw_line(x, y, pixels, size2=3):
    for i in pixels:
        setpen(x, y)
        draw_pixel(x, y, i, size2)
        x += size2

def draw_block(x, y, block, size2=3):
    for i in block:
        draw_line(x, y, i, size2)
        y -= size2

str = 'GAME OVER'
def draw_str(x, y, str, size2=3):
    for i in str:
        setpen(x, y)
        i = dict_char[i]
        draw_block(x, y, i, size2)
        x += len(i[0]) * size2

# draw_str(-225, 250, str, size2=5)

def block_index(x, y):
    return square[x][y]

def search_lei(element=9):
    index_list = []
    for a, i in enumerate(square):
        for b, j in enumerate(i):
            if j == element:
                index = (a, b)
                index_list.append(index)
    return index_list

def click(*args):
    x, y = args
    index = touched_index(x, y)
    x, y = int(index[0]), int(index[1])
    a = block_index(x, y)
    if a == 9:
        list = search_lei()
        for i in list:
            x, y = i[0], i[1]
            x1 = -200 + x * 30
            y1 = 200 - y * 30
            block = dict_num[a]
            draw_block(x1, y1, block, size2=1)
            draw_str(-150, 250, str, size2=3)
    else:
        x1 = -200 + x * 30
        y1 = 200 - y * 30
        block = dict_num[a]
        draw_block(x1, y1, block)

turtle.onscreenclick(click)


def touched_index(x, y):
    log(x, y)
    size3 = 3
    a = 10
    b = 10
    x1, y1 = -200, 200
    w = a * size3
    h = b * size3
    index_x = (x - x1) // w
    index_y = (y1 - y) // h
    log(index_x, index_y)
    return (index_x, index_y)

turtle.done()
